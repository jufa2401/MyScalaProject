import scala.math.{pow, sqrt}
import scala.util.Random

res0: Option[(Double, Double)] = Some((2.0,-1.0))
res1: Option[(Double, Double)] = None
res2: Option[(Double, Double)] = Some((1.0,-1.0))

solve: solve[](val A: Int,val B: Int,val C: Int) => Option[(Double, Double)]










defined class Point



res3: Double = 1.4142135623730951
res4: Double = 3.0


defined class Vector3d




res5: Double = 18.0


force: force[](val m1: Double,val m2: Double,val d: Double) => Double



mean: mean[](val array: Array[Double]) => Double






stddev: stddev[](val array: Array[Double]) => Double







res6: Double = 3.5
res7: Double = 1.118033988749895


res8: Boolean = false
res9: Boolean = false
res10: Boolean = true
res11: Boolean = false
java.lang.Exception: Input cannot be negativeres12: AnyVal = ()





isPrime: isPrime[](val input: Int) => Boolean






gcd: gcd[](val a: Int,val b: Int) => Int




phi: phi[](val n: Int) => Int








res13: Int = 6
res14: Int = 4

res15: (Int, Int) = (2,6)
rollDice: rollDice[]() => (Int, Int)





